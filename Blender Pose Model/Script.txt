#  /---Amaan Rahman--\
# /----3D POSE MODEL--\
#/-----VISUALIZER------\

import bpy
import json
import mathutils 
import math
import time


scn = bpy.context.scene
arm = bpy.data.objects.get("Armature")
bpy.context.view_layer.objects.active = arm
arm.select_set(True)
bpy.ops.object.mode_set(mode='POSE', toggle=False)
bones = arm.pose.bones


points = {}

def new_pose(name, h, t):
    count = 0
    b = bones[name]
    v = mathutils.Vector(b.tail)#vector of current limb pose from preset skeleton
    p0 = mathutils.Vector(points[str(h)])
    print(p0)
    p1 = mathutils.Vector(points[str(t)])
    print(p1)
    u = p1 - p0 #vector of new limb pose from point cloud
    #theta = math.acos((v.dot(u))/((v.length)*(u.length))) #angle between vectors on same plane normal to axis of rotation
    
    theta = v.angle(u)
    print("\n"+str(theta)+"\n")
    axis = v.cross(u) #axis of rotation 
    quat = mathutils.Quaternion(axis.normalized(), -theta) #axis-angle -> quaternion
    b.rotation_mode = 'QUATERNION'
    b.rotation_quaternion = quat
    b.keyframe_insert(data_path="rotation_quaternion", index=-1)
   

def update():
    #new_pose("body", 8, 1)
    #new_pose("neck", 1, 0)
    #new_pose("leftEye", 0, 16)
    #new_pose("leftEar", 16, 18)
    #new_pose("rightEye", 0, 15)
    #new_pose("rightEar", 15, 17)
    new_pose("leftShoulder", 1, 5)
    new_pose("rightShoulder", 1, 2)
    new_pose("leftArm", 5, 6)
    new_pose("rightArm", 2, 3)
    new_pose("leftForearm", 6, 7)
    new_pose("rightForearm", 3, 4)
    """
    new_pose("leftHip", 8, 12)
    new_pose("rightHip", 8, 9)
    new_pose("leftThigh", 12, 13)
    new_pose("rightThigh", 9, 10)
    new_pose("leftShin", 13, 14)
    new_pose("rightShin", 10, 11)
    """
        
def reset():
    for b in bones: 
        b.rotation_mode = 'QUATERNION'
        b.rotation_quaternion = (1, 0, 0, 0) #identity quaternion
        b.keyframe_insert(data_ path="rotation_quaternion", index=-1)
"""
frame = 0
with open('C:\\Users\\Amaan\\Documents\\GitHub\\openpose\\out_new.json') as f:
    reset()
    scn.frame_set(frame)
    time.sleep(5)
    while True:
        try:
            print(str(points)+"\n")
            frame+=1
            f.seek(0,0)
            if(f.closed):
                raise StopIteration
            data = json.load(f)
            for key, coordinates in data.items():
                #if coordinates['xyz'][2] < 0:
                print("\nNEGATIVE Z VALUE DETECTED\n")
                    
                points[str(key)] = coordinates['xyz']                
            update()
            scn.frame_set(frame)
        except ValueError:
            print("\nCORRUPTION!\n")
            continue   
"""
reset()

with open('C:\\Users\\Amaan\\Documents\\GitHub\\openpose\\out_new.json') as f:
    try:
        data = json.load(f)
        for key, coor in data.items():
            points[str(key)] = coor['xyz']
        print(points)
        new_pose("leftShoulder", 1, 5)
        new_pose("rightShoulder", 1, 2)
        new_pose("leftArm", 5, 6)
        new_pose("rightArm", 2, 3)
        new_pose("leftForearm", 6, 7)
        new_pose("rightForearm", 3, 4)
    except ValueError:
        print("COORUTER")
